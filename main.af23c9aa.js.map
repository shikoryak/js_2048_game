{"version":3,"sources":["scripts/main.js"],"names":["Game","container","field","querySelector","startButton","score","messageStart","messageLose","messageWin","columns","querySelectorAll","length","addStartListener","addKeyListener","board","Array","from","scoreValue","addEventListener","start","bind","init","transformStartButton","addNewCell","classList","contains","remove","add","textContent","hasEmptyCell","found","rowIndex","Math","floor","random","cellIndex","drawCell","some","row","cell","index","hasCellsToMerge","transformBoard","forEach","fieldCell","rows","cells","className","document","move","keyEvent","isGameOver","isWin","prevBoard","JSON","stringify","key","slideLeft","slideRight","slideDown","slideUp","currentRow","filter","i","splice","push","map","_","slide","reverse","game"],"mappings":"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","file":"main.af23c9aa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(container) {\n    this.container = container;\n\n    this.field = this.container.querySelector('.game-field');\n    this.startButton = this.container.querySelector('.button');\n    this.score = this.container.querySelector('.game-score');\n\n    this.messageStart = this.container.querySelector('.message-start');\n    this.messageLose = this.container.querySelector('.message-lose');\n    this.messageWin = this.container.querySelector('.message-win');\n\n    this.columns = this.field.querySelectorAll('tbody > tr').length;\n\n    this.addStartListener();\n    this.addKeyListener();\n  }\n\n  init() {\n    this.board = Array.from(Array(this.columns), () => (\n      Array.from(Array(this.columns), () => 0)\n    ));\n\n    this.scoreValue = 0;\n  }\n\n  addStartListener() {\n    this.startButton.addEventListener('click', this.start.bind(this));\n  }\n\n  start() {\n    this.init();\n    this.transformStartButton();\n    this.addNewCell();\n    this.addNewCell();\n  }\n\n  transformStartButton() {\n    if (this.startButton.classList.contains('start')) {\n      this.startButton.classList.remove('start');\n      this.startButton.classList.add('restart');\n      this.startButton.textContent = 'Restart';\n      this.messageStart.classList.add('hidden');\n    } else {\n      this.messageWin.classList.add('hidden');\n      this.messageLose.classList.add('hidden');\n    };\n  }\n\n  addNewCell() {\n    if (!this.hasEmptyCell()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const rowIndex = Math.floor(Math.random() * this.columns);\n      const cellIndex = Math.floor(Math.random() * this.columns);\n\n      if (this.board[rowIndex][cellIndex] === 0) {\n        this.board[rowIndex][cellIndex] = Math.random() < 0.9 ? 2 : 4;\n        this.drawCell();\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyCell() {\n    return this.board.some(row => row.some(cell => cell === 0));\n  }\n\n  hasCellsToMerge(board) {\n    return board.some(row => row\n      .some((cell, index) => cell === row[index + 1]));\n  }\n\n  isWin() {\n    return this.board.some(row => row.some(cell => cell === 2048));\n  }\n\n  isGameOver() {\n    if (this.hasEmptyCell()) {\n      return false;\n    }\n\n    return !this.hasCellsToMerge(this.board)\n      && !this.hasCellsToMerge(this.transformBoard(this.board));\n  }\n\n  drawCell() {\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        const fieldCell = this.field.rows[rowIndex].cells[cellIndex];\n\n        fieldCell.className = '';\n        fieldCell.classList.add('field-cell', `field-cell--${cell}`);\n        fieldCell.textContent = cell || '';\n      });\n    });\n  }\n\n  addKeyListener() {\n    document.addEventListener('keydown', this.move.bind(this));\n  }\n\n  move(keyEvent) {\n    if (!this.board) {\n      return;\n    }\n\n    if (this.isGameOver()) {\n      this.messageLose.classList.remove('hidden');\n\n      return;\n    }\n\n    if (this.isWin()) {\n      this.messageWin.classList.remove('hidden');\n\n      return;\n    }\n\n    const prevBoard = JSON.stringify(this.board);\n\n    switch (keyEvent.key) {\n      case 'ArrowLeft':\n        this.slideLeft();\n        break;\n\n      case 'ArrowRight':\n        this.slideRight();\n        break;\n\n      case 'ArrowDown':\n        this.slideDown();\n        break;\n\n      case 'ArrowUp':\n        this.slideUp();\n        break;\n    }\n\n    if (prevBoard !== JSON.stringify(this.board)) {\n      this.addNewCell();\n    }\n\n    this.score.textContent = this.scoreValue;\n  }\n\n  slide(row) {\n    const currentRow = row.filter(cell => cell !== 0);\n\n    for (let i = 0; i < currentRow.length - 1; i++) {\n      if (currentRow[i] === currentRow[i + 1]) {\n        currentRow[i] *= 2;\n        currentRow.splice(i + 1, 1);\n        this.scoreValue += currentRow[i];\n      }\n    }\n\n    while (currentRow.length < this.columns) {\n      currentRow.push(0);\n    }\n\n    return currentRow;\n  }\n\n  transformBoard(board = this.board) {\n    return board[0].map((_, index) => this.board.map(row => row[index]));\n  };\n\n  slideLeft() {\n    this.board = this.board.map(row => this.slide(row));\n  }\n\n  slideRight() {\n    this.board = this.board.map(row => this.slide(row.reverse()).reverse());\n  }\n\n  slideUp() {\n    this.board = this.transformBoard();\n    this.slideLeft();\n    this.board = this.transformBoard();\n  };\n\n  slideDown() {\n    this.board = this.transformBoard();\n    this.slideRight();\n    this.board = this.transformBoard();\n  };\n}\n\nconst game = new Game(document.querySelector('.container'));\n\ngame.init();\n"]}